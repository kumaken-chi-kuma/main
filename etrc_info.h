#ifndef ETRC22_ETRC_INFO_H_
#define ETRC22_ETRC_INFO_H_

#include <list>
#include <algorithm>
#include <climits>
#include <math.h>
#include <tuple>

#include "device_io.h"
#include "info_type.h"

const int kCourseParamNum = 201;

class Luminous {
 public:
  Luminous(SensorIo* sensor_io);
  void Update();
  Color JudgeColor(Hsv _hsv);//paku
  Color color_;
  Rgb rgb_;
  Hsv hsv_;

//////////////////////paku////////////////////////
  int max;
  int min;
  int MAX_R = 194;
  int MAX_G = 211;
  int MAX_B = 222;

  int MIN_R = 9;
  int MIN_G = 11;
  int MIN_B = 12;

  int MAX_Y_h = 30;
  int MAX_G_h = 140;
  int MAX_B_h = 245;
  int MAX_R_h = 355;
//////////////////////paku////////////////////////


 private:
  void SetColorReference(Color c, Hsv hsv);
  void UpdateRgb();
  void UpdateHsv();
  void UpdateColor();
  SensorIo* sensor_io_;
  Hsv color_ref_[kColorNum];

//////////////////////paku////////////////////////

  /////////////////endcondition in bonus/////////////////
  float color_last = 0;
  /////////////////endcondition in bonus/////////////////

//////////////////////paku////////////////////////
};

class Odometry {
  public:
   Odometry(MotorIo* motor_io);
   void Update();
   double distance = 0;
   double theta = 0;
   double x = 0;
   double y = 0;
   double direction = 0;
   double deg_theta = 0;

  private:
   MotorIo* motor_io_;
   const int8_t R = 45;
   const int8_t D = 126;
   int32_t counts_r_;
   int32_t counts_l_;
   int curr_index = 0;
   int32_t counts_rs[100000] = {};
   int32_t counts_ls[100000] = {};
   double theta_wa = 0;
   double before_x = 0;
   double before_y = 0;
   double difference_x = 0;
   double difference_y = 0;
   char a[1024];
};

class CubicSpline {
  // public:
  //  CubicSpline();
  //  void setCourseParam();
  //  double CalcEndpoint(const std::list<double> y);
  //  double Calc(double t);
  //  double accl;

  // private:
  //  std::list<double> a_;
  //  std::list<double> b_;
  //  std::list<double> c_;
  //  std::list<double> d_;
  //  std::list<double> w_;
};

class PurePursuit {
  public:
   PurePursuit(MotorIo* motor_io);
   double x, y, yaw;
   void Update(double x, double y);
   double target_distance = 0;
   double difference_rad = 0;
   const double lf = 65;
  //  int base_p_power = 45; 
  //  double gain_kv_r = 0.057; //比例
  //  double gain_kv_l = 0.05; //比例
  //  double gain_kt_r = 6.5; //微分
  //  double gain_kt_l = 6.5; //微分

  private:
   MotorIo* motor_io_; 
   Odometry* odometry_;
   double calc_distance(double point_x, double point_y);
   std::tuple<int, double> pursuit_control(int ind);
   std::tuple<int, double> search_target_index();

   int ind;
   int target_ind;
   int pre_point_index= INT_MAX;
   double target_direction = 0;
   double direction_odo;
   double p_lf;
   double delta = 0;
   char b[256];

   float course_x[kCourseParamNum]={0,32.13938089,64.27876179,96.41814268,128.5575236,160.6969045,192.8362854,224.9756663,257.1150472,289.2544281,321.3938089,353.5331898,385.6725707,417.8119516,449.9513325,482.0907134,514.2300943,546.3694752,578.5088561,610.648237,642.7876179,674.9269988,707.0663797,739.2057606,771.3451415,803.4845224,835.6239033,867.7632842,899.9026651,932.042046,964.1814268,996.3208245,1028.518548,1061.15889,1094.18548,1127.447456,1160.793958,1194.074125,1227.137098,1259.832016,1292.008018,1323.514244,1354.199834,1383.913927,1412.505663,1439.824181,1465.718622,1490.038124,1512.631827,1533.350293,1552.125888,1569.015785,1584.08766,1597.409192,1609.04806,1619.07194,1627.548511,1634.545451,1640.130438,1644.371151,1647.335574,1649.133534,1649.958668,1650.014611,1649.504996,1648.633458,1647.603632,1646.61908,1645.838903,1645.302113,1645.02765,1645.034451,1645.341455,1645.9676,1646.931826,1648.25307,1649.950272,1652.042369,1654.5483,1657.487003,1660.877418,1664.738483,1669.089136,1673.948315,1679.334959,1685.268008,1691.766398,1698.849069,1706.534959,1714.843007,1723.792151,1733.40133,1743.689482,1754.675546,1766.37846,1778.817163,1792.010593,1805.977689,1820.737389,1836.308632,1852.710356,1869.9615,1888.081003,1907.087802,1927.000836,1947.839044,1969.621365,1992.366736,2016.094097,2040.822386,2066.570541,2093.357501,2121.202204,2150.123589,2180.140595,2211.272159,2243.32491,2275.464291,2307.603672,2339.743052,2371.882433,2404.021814,2436.161195,2468.300576,2500.439957,2532.579338,2564.718719,2596.8581,2628.997481,2661.136861,2693.276242,2725.415623,2757.555004,2789.694385,2821.833766,2853.973147,2886.112527,2918.252746,2948.707812,2980.152276,3009.832691,3038.105144,3066.248549,3093.738835,3120.493947,3145.517808,3171.094602,3195.495564,3220.177712,3242.586039,3261.445148,3279.361671,3298.505417,3312.161977,3326.679043,3336.469402,3347.171833,3356.535251,3365.513456,3371.888326,3371.609354,3371.679182,3377.631795,3377.620007,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62,3377.62};
   float course_y[kCourseParamNum]={0,8.45E-97,-8.50E-94,-1.72E-91,1.33E-87,-1.14E-84,-5.13E-82,2.06E-78,-1.49E-75,-1.14E-72,3.12E-69,-1.85E-66,-2.22E-63,4.64E-60,-2.16E-57,-4.02E-54,6.80E-51,-2.25E-48,-6.94E-45,9.78E-42,-1.80E-39,-1.16E-35,1.38E-32,-2.36E-31,-1.87E-26,1.91E-23,3.46E-21,-2.95E-17,2.57E-14,1.09E-11,-4.56E-08,3.36E-05,0.120017506,1.267538808,3.648737027,7.293101761,12.23012261,18.48928918,26.10009106,35.09201785,45.49455916,57.33720459,70.64944373,85.46076618,101.8006616,119.6986194,139.1841294,160.2866811,183.0357642,207.4594573,233.5046964,260.9946211,289.7419496,319.5593999,350.2596903,381.6555389,413.5596637,445.7847829,478.1436147,510.4488771,542.5141236,574.2662397,605.8591453,637.4738388,669.2913183,701.492582,734.2586282,767.7703587,802.1492313,837.3561456,873.3251628,909.9903438,947.2857495,985.1454409,1023.503479,1062.293925,1101.450839,1140.908283,1180.600317,1220.461003,1260.424401,1300.424573,1340.395579,1380.271481,1419.986338,1459.474213,1498.669167,1537.505259,1575.916552,1613.837105,1651.200981,1687.94224,1723.994943,1759.293151,1793.770925,1827.362325,1860.001414,1891.622251,1922.158899,1951.545417,1979.715866,2006.604309,2032.144805,2056.271416,2078.918202,2100.019225,2119.508545,2137.320224,2153.388322,2167.6469,2180.03002,2190.471743,2198.906128,2205.267238,2209.489133,2211.505875,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.68,2211.679999,2211.682022,2207.615726,2205.938049,2200.001579,2190.665988,2181.018849,2169.794943,2156.796168,2139.617782,2123.774297,2105.092109,2087.090399,2063.978149,2039.647857,2014.929731,1990.71995,1964.237301,1938.111086,1910.027004,1882.320716,1854.05979,1825.639303,1796.140479,1763.885545,1731.775087,1702.10136,1669.957096,1637.817712,1605.678331,1573.53895,1541.39957,1509.260189,1477.120808,1444.981427,1412.842046,1380.702665,1348.563284,1316.423903,1284.284522,1252.145141,1220.005761,1187.86638,1155.726999,1123.587618,1091.448237,1059.308856,1027.169475,995.0300943,962.8907134,930.7513325,898.6119516,866.4725707,834.3331898,802.1938089,770.0544281,737.9150472,705.7756663,673.6362854,641.4969045,609.3575236,577.2181427,545.0787618,512.9393809};
   
  //  CubicSpline* cubic_spline_;
};

class Localize {
 public:
  Localize(MotorIo* motor_io);
  void Update();
  double distance_ = 0;
  double theta_ = 0;
  double odometry_x = 0;
  double odometry_y = 0;

 private:
  Odometry* odometry_;
  PurePursuit* pure_pursuit_;
};

#endif  // ETRC22_ETRC_INFO_H_
